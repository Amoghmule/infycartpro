{"version":3,"sources":["components/Navbar.jsx","components/Category.jsx","components/Card.jsx","components/Cards.jsx","components/Home.jsx","components/Cart.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","type","data-toggle","data-target","id","to","class","Component","Category","style","width","onClick","this","handle","Card","props","card","src","title","text","margin","Cards","Data","map","data","Home","Cart","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"irbAgDeA,E,uKA1CX,OACE,yBAAKC,UAAU,2DACb,uBAAGC,KAAK,IAAID,UAAU,gBAAtB,qBAIA,4BACEA,UAAU,iBACVE,KAAK,SACLC,cAAY,WACZC,cAAY,cAEZ,0BAAMJ,UAAU,yBAGlB,yBAAKA,UAAU,2BAA2BK,GAAG,aAC3C,wBAAIL,UAAU,0BACZ,kBAAC,IAAD,CAAMM,GAAG,KACT,wBAAIN,UAAU,aACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,QACO,0BAAMD,UAAU,WAAhB,gBAKT,kBAAC,IAAD,CAAMM,GAAG,SACT,wBAAIN,UAAU,YACZ,uBAAGA,UAAU,WAAYC,KAAK,KAA9B,OACO,IACL,uBAAGM,MAAM,oBACP,0BAAMA,MAAM,uBAAZ,iB,GAhCGC,aCcNC,G,6KAbX,OACE,yBAAKF,MAAM,OAAOG,MAAO,CAAEC,MAAO,QAChC,yBAAKJ,MAAM,sBAAsBK,QAASC,KAAKC,QAA/C,mBACA,wBAAIP,MAAM,+BACR,wBAAIA,MAAM,2BAAV,SACA,wBAAIA,MAAM,2BAAV,QACA,wBAAIA,MAAM,2BAAV,gB,GARaC,cCyBRO,E,uKAnBD,IAAD,EAEiBF,KAAKG,MAAMC,KAA5BC,EAFA,EAEAA,IAAIC,EAFJ,EAEIA,MAAMC,EAFV,EAEUA,KACf,OACI,yBAAKpB,UAAU,sBAAsBU,MAAO,CAAEC,MAAO,QAASU,OAAO,SACrE,yBAAKrB,UAAU,eAAekB,IAAKA,IACnC,yBAAKlB,UAAU,aACb,wBAAIA,UAAU,cAAcmB,GAC5B,uBAAGnB,UAAU,aAAaoB,GAE1B,uBAAGnB,KAAK,IAAID,UAAU,mBAAtB,qB,GAdKQ,a,QCqBJc,E,uKAdX,OAEE,yBAAKtB,UAAU,MAAMK,GAAG,SAEvBkB,EAAKC,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,CAAMR,KAAMQ,Y,GAVAjB,aCeLkB,G,6KAZX,OACE,yBAAK1B,UAAU,kBAAkBK,GAAG,QAClC,yCACA,yBAAKE,MAAM,OACT,kBAAC,EAAD,CAAUP,UAAU,MAAMK,GAAG,eAC7B,kBAAC,EAAD,CAAOL,UAAU,e,GAVRQ,cCaJmB,G,6KAZP,OACI,yBAAK3B,UAAU,mBACX,4C,GALGQ,c,OCkBJoB,E,uKAZX,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6B,KAAK,eAAeC,OAAK,EAACC,UAAWL,IAC5C,kBAAC,IAAD,CAAOG,KAAK,oBAAoBE,UAAWJ,U,GAPnCnB,aCKEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.31c8fb99.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from \"react\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar sticky-top  navbar-expand-md navbar-dark bg-dark\">\r\n        <a href=\"#\" className=\"navbar-brand\">\r\n          Chocolate Factory\r\n        </a>\r\n\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarNav\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav text-center\">\r\n            <Link to=\"/\">\r\n            <li className=\"nav-item \">\r\n              <a className=\"nav-link\" href=\"#\">\r\n                Home <span className=\"sr-only\">(current)</span>\r\n              </a>\r\n            </li>\r\n            </Link>\r\n\r\n            <Link to=\"/cart\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\"  href=\"#\">\r\n                Cart{\" \"}\r\n                <i class=\"fa fa-envelope-o\">\r\n                  <span class=\"badge badge-primary\">11</span>\r\n                </i>\r\n              </a>\r\n            </li>\r\n            </Link>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from \"react\";\r\n\r\nclass Category extends Component {\r\n  render() {\r\n    return (\r\n      <div class=\"card\" style={{ width: \"20%\"}}>\r\n        <div class=\"card-header pointer\" onClick={this.handle}> All Categories</div>\r\n        <ul class=\"list-group list-group-flush\">\r\n          <li class=\"list-group-item pointer\">Bread</li>\r\n          <li class=\"list-group-item pointer\">Milk</li>\r\n          <li class=\"list-group-item pointer\">Snacks</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Category;\r\n","/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable jsx-a11y/img-redundant-alt */\r\nimport React, { Component } from 'react';\r\n\r\nclass Card extends Component {\r\n\r\n    \r\n    \r\n    render() { \r\n\r\n      const {src,title,text }=this.props.card;\r\n        return (\r\n            <div className=\"card border-primary\" style={{ width: \"18rem\", margin:\"15px\" }}>\r\n            <img className=\"card-img-top\" src={src} />\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{title}</h5>\r\n              <p className=\"card-text\">{text}</p>\r\n    \r\n              <a href=\"#\" className=\"btn btn-warning\">\r\n                Add to Cart\r\n              </a>\r\n            </div>\r\n          </div>\r\n          );\r\n    }\r\n}\r\n \r\nexport default Card;","/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable react/jsx-no-comment-textnodes */\r\n/* eslint-disable jsx-a11y/img-redundant-alt */\r\nimport React, { Component } from \"react\";\r\nimport Card from './Card';\r\nimport Data from './data.json';\r\n\r\nclass Cards extends Component {\r\n  \r\n\r\n\r\n  render() {\r\n    return (\r\n      \r\n      <div className=\"col\" id=\"cards\">\r\n        \r\n      {Data.map((data) => (\r\n        <Card card={data} />\r\n      ))}\r\n      \r\n    </div>\r\n    \r\n    );\r\n  }\r\n}\r\n\r\nexport default Cards;\r\n","import React, { Component } from \"react\";\r\nimport Category from \"./Category\";\r\nimport Cards from \"./Cards\";\r\nimport './Home.css'\r\n\r\nclass Home extends Component {\r\n    \r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\" id=\"home\">\r\n        <h3>Our items</h3>\r\n        <div class=\"row\">\r\n          <Category className=\"col\" id=\"categories\" />\r\n          <Cards className=\"col \"/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport './Cart.css'\r\n\r\nclass Cart extends Component {\r\n    \r\n    render() { \r\n        return ( \r\n            <div className=\"container-fluid\">\r\n                <h3>My Cart</h3>\r\n                \r\n\r\n\r\n\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Cart;","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport Cart from \"./components/Cart\";\nimport { Switch, Route } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route path=\"/infycartpro\" exact component={Home} />\n          <Route path=\"/infycartpro/cart\" component={Cart} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}